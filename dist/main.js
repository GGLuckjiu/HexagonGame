/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\nlet can = document.querySelector('#can')\nlet ctx = can.getContext('2d')\nclass Hexagon { //六边形类\n    constructor(ctx, x, y, r = 10) {\n        this.points = []\n        this.perpendicular = 0\n        this.ctx = ctx\n        this.x = x\n        this.y = y\n        this.r = r\n    }\n    _getPoints() {\n        this.perpendicular = this.r * Math.sin(Math.PI / 3)\n        let angle = 0\n        for (let i = 0; i < 6; i++) { //以x轴为正方向 递增60度\n            this.points.push({\n                x: this.x + this.r * Math.cos(angle),\n                y: this.y + this.r * Math.sin(angle)\n            })\n            angle += Math.PI / 3\n        }\n    }\n    draw(begin, close, fill) { //判断是不是需要一笔画成\n        this._getPoints()\n        let points = this.points\n        if (!begin) {\n            this.ctx.beginPath()\n        }\n        this.ctx.moveTo(points[0].x, points[0].y)\n        for (let i = 1, len = points.length; i < len; i++) {\n            this.ctx.lineTo(points[i].x, points[i].y)\n        }\n        this.ctx.strokeStyle = \"blue\"\n        this.ctx.fillStyle = fill ? fill : '#fff'\n        this.ctx.fill()\n        if (!close) {\n            this.ctx.closePath()\n        }\n        this.ctx.stroke();\n        return this\n    }\n}\n\nclass Stage { //舞台类\n    constructor(width, height, r = 10) {\n        this.width = width\n        this.height = height\n        this.r = r\n        this.mistake = 0.1 //精度误差范围\n        this.cp = {}\n        this.lastDp = {}\n        this.dp = {} //正被探测的点\n        this.dCells = [] //需要被探测的点\n        this.cells = []\n        this.boundRect = {}\n    }\n    init() {\n        this.mistake = this.r * this.mistake\n        this.cp = {\n            x: this.width / 2,\n            y: this.height / 2\n        }\n        this.dp = Object.assign(this.cp, {\n            mark: [false, false, false, false, false, false]\n        }, //网格标记-用来判重构建网\n            {\n                done: false\n            })\n        //以x轴为正，逆时针排点\n        this.dCells.push(this.dp)\n        this._detectPoints()\n        return this\n    }\n    randomId() {\n        return (~~(Math.random() * (1 << 30))).toString(16)\n    }\n    _detectPoints() {\n        while (this.dCells.length > 0) {\n            this.dp = this.dCells.shift()\n            if (!this.dp.done) {\n                this.dp.mark.forEach((item, index) => {\n                    if (!item) {\n                        let subPoint = this._getSubPoint(index),\n                            dirctions = this._excludeSource(index, [false, false, false, false, false, false]);\n                        let verify = this._verifyPoint(subPoint)\n                        if (verify.isPushed) {\n                            let dCells = Array.prototype.concat.call([], this.dCells, this.cells)\n                            this.dp.mark[index] = dCells[verify.order]\n                        } else if (verify.isOut) {\n                            this.dp.mark[index] = -1\n                        } else {\n                            subPoint = Object.assign(subPoint, {\n                                mark: dirctions\n                            }, {\n                                    done: false\n                                })\n                            this.dCells.push(subPoint)\n                            this.dp.mark[index] = subPoint\n                        }\n                    }\n                })\n                this.dp.done = true\n                this.dp.id = this.randomId()\n            }\n            this.cells.push(this.dp)\n        }\n    }\n    _getSubPoint(order) {\n        let R = +(2 * this.r * Math.cos(Math.PI / 6)).toFixed(4)\n        let dp = this.dp\n        return {\n            x: +(dp.x + R * Math.cos(Math.PI / 6 + Math.PI / 3 * order)).toFixed(4),\n            y: +(dp.y - R * Math.sin(Math.PI / 6 + Math.PI / 3 * order)).toFixed(4)\n        }\n    }\n    _excludeSource(index, dir) { //排除来源节点\n        let map = [3, 4, 5, 0, 1, 2] //主从节点对应关系\n        dir[map[index]] = this.dp\n        return dir\n    }\n    _verifyPoint(p) { //判断点 已经在待探索数组中 已经越界\n        let dCells = Array.prototype.concat.call([], this.dCells, this.cells)\n        let isPushed = false\n        let order = -1\n        for (let i = 0, len = dCells.length; i < len; i++) {\n            if (Math.abs(dCells[i].x - p.x) <= this.mistake && Math.abs(dCells[i].y - p.y) <= this.mistake) {\n                isPushed = true\n                order = i\n                break\n            }\n        }\n        let isOut = p.x - this.r < 0 || p.x + this.r > this.width || p.y - this.r < 0 || p.y + this.r >\n            this.height\n        return {\n            isPushed: isPushed,\n            isOut: isOut,\n            order: order\n        }\n    }\n    draw() {\n        this.cells.forEach(item => {\n            new Hexagon(ctx, item.x, item.y, this.r).draw()\n            ctx.fillStyle = 'red'\n            ctx.font = \"10px\";\n            ctx.fillText(`${item.x},${parseInt(item.y)}`, item.x - this.r / 2, item.y);\n        })\n        return this\n    }\n    getBoundRect() {\n        let min = {\n            x: this.cells[0].x,\n            y: this.cells[0].y\n        },\n            max = {\n                x: this.cells[0].x,\n                y: this.cells[0].y\n            }\n        this.cells.forEach(item => {\n            if (item.x < min.x) {\n                min.x = item.x\n            }\n            if (item.y < min.y) {\n                min.y = item.y\n            }\n            if (item.x > max.x) {\n                max.x = item.x\n            }\n            if (item.y > max.y) {\n                max.y = item.y\n            }\n        })\n        this.boundRect = {\n            min: {\n                x: min.x - this.r,\n                y: min.y - this.r\n            },\n            max: {\n                x: max.x + this.r,\n                y: max.y + this.r\n            }\n        }\n        return this.boundRect\n    }\n}\n\nclass Interaction { //基础交互类\n    constructor() {\n        this.target = null\n        this.stage = null\n        this.bg = null\n        this.moving = false\n        this.oriPoint = {}\n        this.mappingPoints = [] //被拖拽的 对应到舞台上的点\n        this.fullLines = [] //满一行的点线\n        this.score = 0\n    }\n    clearAll() {\n        ctx.clearRect(0, 0, can.width, can.height)\n    }\n    saveBg(x, y, width, height) {\n        this.bg = ctx.getImageData(x, y, width, height)\n    }\n    putBg(x, y) {\n        ctx.putImageData(this.bg, x, y)\n    }\n    Scoring(lineArr) {\n\n    }\n    removeLines(point, ids) { //消除\n        let dirs = [0, 1, 2]\n        for (let item of dirs) {\n            let lineRes = this.getLine(point, item, ids)\n            if (lineRes.res) {\n                this.fullLines.push(lineRes.arr)\n            }\n        }\n    }\n    getLine(point, dirction, ids) {\n        let p0 = point.mark[dirction]\n        let p0Arr = [point]\n        while (p0 != -1) {\n            if (p0.done) {\n                return {\n                    res: false\n                }\n            }\n            if (typeof ids[p0.id] === 'number' && ids[p0.id] > 0) {\n                return {\n                    res: false\n                }\n            }\n            p0Arr.push(p0)\n            p0 = p0.mark[dirction]\n        }\n        let p3 = point.mark[dirction + 3]\n        let p3Arr = [point]\n        while (p3 != -1) {\n            if (p3.done) {\n                return {\n                    res: false\n                }\n            }\n            if (typeof ids[p3.id] === 'number' && ids[p3.id] > 0) {\n                return {\n                    res: false\n                }\n            }\n            p3Arr.push(p3)\n            p3 = p3.mark[dirction + 3]\n        }\n        let resArr = Array.prototype.concat.call([], p3Arr.reverse(), p0Arr.splice(1))\n        ids[point.id]++\n        return {\n            res: resArr.length === 1 ? false : true,\n            arr: resArr\n        }\n    }\n    locate(x, y, arr) {\n        let min = Infinity,\n            order = -1\n        arr.forEach((item, index) => {\n            let cal = Math.pow(item.x - x, 2) + Math.pow(item.y - y, 2)\n            if (min > cal) {\n                min = cal\n                order = index\n            }\n        })\n        return order\n    }\n    findPoints(e, target, stage) {\n        let negOne = false,\n            isPaint = false\n        let order = this.locate(e.clientX, e.clientY, this.stage.cells) //目标点\n        let point = this.stage.cells[order]\n        let destPoi = [point]\n        let targetPoi = target.points\n        if (!point.done) {\n            isPaint = true;\n            return {\n                negOne,\n                isPaint,\n                destPoi\n            }\n        }\n        for (let index = 0, len = targetPoi.length; index < len; index++) {\n            if (!targetPoi[index].dirctions) {\n                continue\n            }\n            let dirs = targetPoi[index].dirctions\n            let dirPoint = destPoi[index]\n            for (let ite of dirs) {\n                let p = dirPoint.mark[ite]\n                if (p === -1) {\n                    negOne = true;\n                    return {\n                        negOne,\n                        isPaint,\n                        destPoi\n                    }\n                } else if (!p.done) {\n                    isPaint = true;\n                    return {\n                        negOne,\n                        isPaint,\n                        destPoi\n                    }\n                } else {\n                    destPoi.push(p)\n                }\n            }\n        }\n        return {\n            negOne,\n            isPaint,\n            destPoi\n        }\n    }\n    canDrop(e, target, stage) {\n        let finds = this.findPoints(e, target, stage)\n        if (finds.negOne || finds.isPaint) {\n            return {\n                res: false\n            }\n        }\n        let mappingPoints = finds.destPoi\n        let bound = target.getBoundRect()\n        let sbound = stage.getBoundRect()\n        let inBound = !(bound.min.x + stage.r < sbound.min.x ||\n            bound.min.y + stage.r < sbound.min.y ||\n            bound.max.x - stage.r > sbound.max.x ||\n            bound.max.y - stage.r > sbound.max.y)\n        return {\n            res: (mappingPoints.indexOf(-1) < 0) && inBound,\n            mappingPoints: mappingPoints\n        }\n    }\n    drop(e) {\n        let canDrop = this.canDrop(e, this.target, this.stage)\n        if (!canDrop.res) {\n            this.putBg(0, 0)\n            this.target = this.target.move(this.oriPoint.x, this.oriPoint.y).draw()\n            return\n        }\n        this.putBg(0, 0)\n        this.mappingPoints = canDrop.mappingPoints\n        let ids = {}//匹配的id和对应这个点能消除的行数\n        this.mappingPoints.forEach(item => {\n            item.done = false\n            ids[item.id] = 0\n            new Hexagon(ctx, item.x, item.y, this.stage.r).draw(false, false, this.target.color)\n        })\n        this.fullLines.splice(0)\n        this.mappingPoints.forEach(item => {\n            this.removeLines(item, ids)\n        })\n        if (this.fullLines.length > 0) {\n            this.fullLines.forEach(item => {\n                item.forEach(p => {\n                    p.done = true\n                    new Hexagon(ctx, p.x, p.y, this.stage.r).draw(false, false, '#fff')\n                })\n            })\n        }\n\n        this.saveBg(0, 0, can.width, can.height)\n        // this.target.move(point.x, point.y).draw()\n\n        this.target = new Irregular(can.width - 60, can.height / 2, this.stage.r, 4)\n        this.target.init().draw()\n\n        this.oriPoint = {}\n    }\n    bindEvent(target, stage) {\n        this.target = target\n        this.stage = stage\n        let follow = () => {\n            this.clearAll()\n            this.putBg(0, 0)\n            this.target.draw()\n            let item = window.requestAnimationFrame(follow)\n            window.cancelAnimationFrame(item)\n        }\n        let move = e => {\n            e.preventDefault()\n            this.moving = true\n            this.target.move(e.clientX, e.clientY)\n            follow()\n        }\n        if (document.ontouchstart) {\n            can.addEventListener('touchstart', e => {\n                alert()\n                e.preventDefault()\n                if (ctx.isPointInPath(e.clientX, e.clientY)) {\n                    this.oriPoint = {\n                        x: this.target.cp.x,\n                        y: this.target.cp.y\n                    }\n                    can.addEventListener('touchmove', move)\n                }\n            })\n            can.addEventListener('touchend', e => {\n                e.preventDefault()\n                can.removeEventListener('mousemove', move)\n                if (this.moving) {\n                    this.drop(e)\n                    this.moving = false\n                }\n            })\n\n        } else {\n            can.addEventListener('mousedown', e => {\n                e.preventDefault()\n                if (ctx.isPointInPath(e.clientX, e.clientY)) {\n                    this.oriPoint = {\n                        x: this.target.cp.x,\n                        y: this.target.cp.y\n                    }\n                    can.addEventListener('mousemove', move)\n                }\n            })\n            can.addEventListener('mouseup', e => {\n                e.preventDefault()\n                can.removeEventListener('mousemove', move)\n                if (this.moving) {\n                    this.drop(e)\n                    this.moving = false\n                }\n            })\n        }\n    }\n}\n\nclass Irregular { //随机拼接多边形类\n    constructor(x, y, r = 10, maxLength = 3) {\n        this.cp = {\n            x,\n            y\n        }\n        this.r = r\n        this.color = ''\n        this.mistake = 0.1\n        this.boundRect = {}\n        this.dp = null\n        this.dirNum = 0\n        this.dirction = {} //随机结果判重\n        this.hexCount = Math.floor(Math.random() * maxLength) + 1\n        this.points = []\n    }\n    init() {\n        this.mistake = this.mistake * this.r\n        this.points.push(this.cp)\n        while (this.hexCount > 0) {\n            let point = this._detectPoint()\n            this.points.push(point)\n            // 记录派生关系\n            if (this.dp.dirctions) {\n                this.dp.dirctions.push(this.dirNum)\n            } else {\n                this.dp.dirctions = [this.dirNum]\n            }\n            this.hexCount--\n        }\n        this.getBoundRect()\n        console.log(this, '\\r\\n', this.points)\n        return this\n    }\n    _detectPoint() {\n        this._randomDetectPoint()\n        let point = this._getSubPoint(this.dirNum)\n        if (this._verifyPoint(point)) {\n            point = this._detectPoint.bind(this)()\n        }\n        return point\n    }\n    _randomDetectPoint() {\n        let pointNumber = Math.floor(Math.random() * (this.points.length - 1))\n        let dirction = Math.floor(Math.random() * 5)\n\n        if (!this.dirction[pointNumber]) {\n            this.dirction[pointNumber] = [false, false, false, false, false, false]\n            this.dirction[pointNumber][dirction] = true\n            this.dp = this.points[pointNumber]\n            this.dirNum = dirction\n            return\n        }\n        let trues = this.dirction[pointNumber].toString().match(/true/g).length\n        if (trues === this.dirction[pointNumber].length) {\n            this._randomDetectPoint.bind(this)()\n            return\n        }\n        while (this.dirction[pointNumber][dirction]) {\n            dirction = (dirction + 1) % 6\n        }\n        this.dp = this.points[pointNumber]\n        this.dirNum = dirction\n    }\n    _getSubPoint(order) {\n        let R = +(2 * this.r * Math.cos(Math.PI / 6)).toFixed(4)\n        let dp = this.dp\n        return {\n            x: +(dp.x + R * Math.cos(Math.PI / 6 + Math.PI / 3 * order)).toFixed(4),\n            y: +(dp.y - R * Math.sin(Math.PI / 6 + Math.PI / 3 * order)).toFixed(4)\n        }\n    }\n    _verifyPoint(p) { //判断点 已经在待探索数组中\n        let dCells = Array.prototype.concat.call([], this.points)\n        let isPushed = false\n        for (let item of dCells) {\n            if (Math.abs(item.x - p.x) < this.mistake && Math.abs(item.y - p.y) < this.mistake) {\n                isPushed = true\n                break\n            }\n        }\n        return isPushed\n    }\n    _randomColor() {\n        return \"#\" + (~~(Math.random() * (1 << 24))).toString(16)\n    }\n    draw() {\n        (!this.color) && (this.color = this._randomColor())\n        this.points.forEach((item, index, arr) => {\n            // let color = this._randomColor()\n            if (index === 0) {\n                new Hexagon(ctx, item.x, item.y, this.r).draw(false, false, this.color)\n            } else if (index === arr.length - 1) {\n                new Hexagon(ctx, item.x, item.y, this.r).draw(true, false, this.color)\n            } else {\n                new Hexagon(ctx, item.x, item.y, this.r).draw(true, false, this.color)\n            }\n        })\n        this.points.forEach(item => {\n            ctx.fillStyle = 'black'\n            ctx.font = \"10px\";\n            ctx.fillText(`${item.x},${parseInt(item.y)}`, item.x - this.r / 2, item.y);\n        })\n        return this\n    }\n    getBoundRect() {\n        let min = {\n            x: this.points[0].x,\n            y: this.points[0].y\n        },\n            max = {\n                x: this.points[0].x,\n                y: this.points[0].y\n            }\n        this.points.forEach(item => {\n            if (item.x < min.x) {\n                min.x = item.x\n            }\n            if (item.y < min.y) {\n                min.y = item.y\n            }\n            if (item.x > max.x) {\n                max.x = item.x\n            }\n            if (item.y > max.y) {\n                max.y = item.y\n            }\n        })\n        this.boundRect = {\n            min: {\n                x: min.x - this.r,\n                y: min.y - this.r\n            },\n            max: {\n                x: max.x + this.r,\n                y: max.y + this.r\n            }\n        }\n        return this.boundRect\n    }\n    move(x, y) {\n        let deltX = this.cp.x - x,\n            deltY = this.cp.y - y\n        this.cp = {\n            x,\n            y\n        }\n        this.points.forEach((item, index, arr) => {\n            item.x = item.x - deltX\n            item.y = item.y - deltY\n        })\n        return this\n    }\n}\n\n(() => {\n    let stage = new Stage(can.width - 100, can.height, 20)\n    stage.init().draw()\n\n    let bound = stage.getBoundRect()\n    ctx.beginPath()\n    ctx.moveTo(bound.min.x, bound.min.y)\n    ctx.lineTo(bound.max.x, bound.min.y)\n    ctx.lineTo(bound.max.x, bound.max.y)\n    ctx.lineTo(bound.min.x, bound.max.y)\n    ctx.closePath()\n    ctx.stroke()\n    console.log(stage)\n\n    let ia = new Interaction()\n    ia.saveBg(0, 0, can.width, can.height)\n\n    let ir = new Irregular(can.width - 50, can.height / 2, stage.r, 4)\n    ir.init().draw()\n    ia.bindEvent(ir, stage)\n})()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ });